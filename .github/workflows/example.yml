name: 'bluebox CI/CD example'

on:
  schedule:
    # Run job once a week on saturday at 8:15 AM.
    - cron: '15 8 * * 6'
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

jobs:
  build-initramfs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: ["amd64", "arm64"]
    steps:
      - name: checkout bluebox
        uses: actions/checkout@v4

      - name: set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x
        id: go

      - name: build initramfs
        # Instead of installing bluebox with 'go install github.com/florianl/bluebox@VERSION' we
        # just compile the code here and execute the resulting binary.
        run: |
          go build .
          ./bluebox -a=${{ matrix.target_arch }}

      - name: upload initramfs for tests
        # Upload the generated initramfs.cpio and make it available for the parallel per-kernel tests.
        uses: actions/upload-artifact@v4
        with:
          name: initramfs-${{ matrix.target_arch }}
          path: |
            initramfs.cpio

  per-kernel-tests:
    needs: build-initramfs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # x86 
          - { target_arch: "amd64", kernel_version: "4.9"  }
          - { target_arch: "amd64", kernel_version: "4.14" }
          - { target_arch: "amd64", kernel_version: "4.19" }
          - { target_arch: "amd64", kernel_version: "5.4"  }
          - { target_arch: "amd64", kernel_version: "5.10" }
          - { target_arch: "amd64", kernel_version: "5.15" }
          - { target_arch: "amd64", kernel_version: "6.1"  }
          - { target_arch: "amd64", kernel_version: "6.6"  }
          - { target_arch: "amd64", kernel_version: "6.7"  }
          - { target_arch: "amd64", kernel_version: "6.8"  }
          - { target_arch: "amd64", kernel_version: "6.9"  }
          - { target_arch: "amd64", kernel_version: "6.10" }
          - { target_arch: "amd64", kernel_version: "6.11" }

          # arm64
          - { target_arch: "arm64", kernel_version: "6.6" }
          - { target_arch: "arm64", kernel_version: "6.7" }
          - { target_arch: "arm64", kernel_version: "6.8" }
          - { target_arch: "arm64", kernel_version: "6.9" }
    steps:
      - name: add Docker repo
        run: |
          # From https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
      - name: install dependencies
        # Make sure required software packages are available.
        run: |
          sudo apt --yes update
          sudo apt --yes install --no-install-recommends qemu-system-aarch64 qemu-system-x86 docker-buildx-plugin

      - name: get initramfs
        # Fetch the initramfs.cpio that was created in the previous step.
        uses: actions/download-artifact@v4
        with:
          name: initramfs-${{ matrix.target_arch }}
      
      - name: fetch and unpack Linux kernel
        # Fetch the public kernel image that will be used in this test run.
        # Inspired by extract_oci_image from cilium/ebpf.
        run: |
          mkdir /tmp/ci-kernel
          echo "FROM ghcr.io/cilium/ci-kernels:${{ matrix.kernel_version }}" | docker buildx build --platform linux/${{ matrix.target_arch }} --quiet --pull --output="/tmp/ci-kernel/${{ matrix.target_arch }}/${{ matrix.kernel_version }}/" -
      
      - name: run tests on x86 kernel
        if: matrix.target_arch == 'amd64'
        # Run the x86 specific tests.
        run: |
          qemu-system-x86_64  -nographic  -append "console=ttyS0" -m 2G -kernel /tmp/ci-kernel/${{ matrix.target_arch }}/${{ matrix.kernel-version }}/boot/vmlinuz -initrd initramfs.cpio | tee log.txt

      - name: run tests on arm64 kernel
        if: matrix.target_arch == 'arm64'
        # Run the arm64 specific tests.
        run: |
          qemu-system-aarch64 -nographic  -append "console=ttyAMA0"  -M virt -cpu cortex-a57 -m 4G -kernel /tmp/ci-kernel/${{ matrix.target_arch }}/${{ matrix.kernel-version }}/boot/vmlinuz  -initrd initramfs.cpio | tee log.txt
